workflow:
    name: Spring Boot Gradle Pipeline  # Nom personnalisé du pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH =~ /^gradle/
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^gradle/ && $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: always


stages:
  - build
  - test


# Job de build
build-java-project:
  stage: build
  image: gradle:8.4-jdk21  # Spécifier l'image Docker
  before_script:
    - chmod +x ./gradlew   # S'assurer que gradlew est exécutable
  script:
    - ./gradlew clean build -x test --no-daemon
  artifacts:
    paths:
      - build/libs/*.jar   # Conserver le JAR généré
    expire_in: 1 hour


# Job de test
test-java-project:
  stage: test
  image: gradle:8.4-jdk21
  services:
    - name: mysql:latest
      alias: mysql
  variables:
    MYSQL_DATABASE: ${MYSQL_DATABASE}
    MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    # MYSQL_USER: ${MYSQL_USER}
    MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  before_script:
    - chmod +x ./gradlew   # S'assurer que gradlew est exécutable
    - echo "Attendre que MySQL soit prêt..."
    - until mysqladmin ping -hmysql --silent; do sleep 1; done
  script:
    - ./gradlew test --no-daemon
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/reports/tests/
    expire_in: 1 week
    when: always
  allow_failure: false    # Permet au pipeline de s'arrêter si les tests échouent
  dependencies:
    - build-java-project