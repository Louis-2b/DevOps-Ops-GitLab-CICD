workflow:
    name: Spring Boot Gradle Pipeline  # Nom personnalis√© du pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH =~ /^gradle/
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^gradle/ && $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: always


stages:
  - test
  - build
  - checkstyle
  - sonarqube
  - snyk
  - docker-build
  - trivy-scan
  - docker-push
  - notify
  

variables:
  # Database configuration
  SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/ytlecture?createDatabaseIfNotExist=true"
  SPRING_DATASOURCE_USERNAME: "root"
  SPRING_DATASOURCE_PASSWORD: "root"

  # Gradle configuration
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false"  # Optimisation m√©moire Gradle

  # Nexus configuration
  NEXUS_USER: "admin"  # üë§ Nom d'utilisateur pour l'authentification √† Nexus
  NEXUS_PRIVATE: "nexus.tubie.devops.ops:8083"  # üåç Nom DNS ou IP du serveur Nexus
  
  # Docker Configuration
  IMAGE_VERSION: $CI_PIPELINE_ID 
  IMAGE_NAME: "spring-boot"
  DOCKER_REGISTRY: "${NEXUS_PRIVATE}"
  DOCKER_IMAGE: "${DOCKER_REGISTRY}/${IMAGE_NAME}"


services:
  - name: mysql:8.0
    alias: mysql
    variables:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "ytlecture"

# optimiser les temps d'ex√©cution 
.gradle-cache: &gradle-cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches   # Cache des d√©pendances t√©l√©charg√©es
      - .gradle/wrapper  # Fichiers du Gradle Wrapper
      - .gradle/daemon   # Donn√©es du d√©mon Gradle (acc√©l√®re les builds)
    policy: pull-push


.test-setup: &test-setup
  before_script:
    - apt-get update -yq && apt-get install -y mysql-client  # Installation du client MySQL
    - echo "Waiting for MySQL to be ready..."
    - until mysqladmin ping -hmysql --silent; do sleep 2; done


.slack-notify: &slack-notify
  image: curlimages/curl:latest
  script:
    - >-
      curl -X POST -H 'Content-type: application/json'
      --data "{
        \"channel\": \"#gitlabci\",
        \"username\": \"Tubie\",
        \"text\": \"${SLACK_MESSAGE}\",
        \"icon_emoji\": \":gitlab:\"
      }"
      "${SLACK_WEBHOOK_URL}"


# ===== STAGE: TEST =====
test-java-project:
  stage: test
  image: gradle:8.4-jdk21
  <<: *test-setup
  <<: *gradle-cache
  script:
    - ./gradlew test --no-daemon
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/reports/
      - build/test-results/
      - build/classes/java/main/
      - build/reports/jacoco/test/jacocoTestReport.xml
    expire_in: 1 week
    when: always
  allow_failure: false  # Permet au pipeline de s'arr√™ter si les tests √©chouent


# ===== STAGE: BUILD =====
build-java-project:
  stage: build
  image: gradle:8.4-jdk21
  <<: *gradle-cache
  script:
    - ./gradlew clean build -x test --no-daemon
  artifacts:
    paths:
      - build/libs/*.jar 
      - build/classes/java/main/
    expire_in: 1 hour


# ===== STAGE: CHECKSTYLE - Analyse standard =====
checkstyle-analysis:
  stage: checkstyle
  image: gradle:8.4-jdk21
  <<: *gradle-cache
  script:
    - ./gradlew checkstyleMain checkstyleTest  # Ex√©cute Checkstyle pour main et test
  artifacts:
    reports:
      junit: build/reports/checkstyle/*.xml  # Rapport Checkstyle
    paths:
      - build/reports/checkstyle/
    expire_in: 1 week
  allow_failure: false  # Ou true si vous voulez continuer malgr√© les violations


# ===== STAGE: SONARQUBE - Analyse avanc√©e =====
sonarqube-check:
  stage: sonarqube
  image: gradle:8.4-jdk21
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # D√©finit l'emplacement du cache des t√¢ches d'analyse
    GIT_DEPTH: "0"  # Indique √† git de r√©cup√©rer toutes les branches du projet, requises par la t√¢che d'analyse  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  dependencies:
    - test-java-project
    - build-java-project
  script:
    - ./gradlew sonarqube
        -Dsonar.projectKey="Spring_Boot_Project"
        -Dsonar.projectName="Spring Boot Project"
        -Dsonar.sources=src/main/java
        -Dsonar.tests=src/test/java
        -Dsonar.java.binaries=build/classes/java/main
        -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
        -Dsonar.host.url="$SONAR_HOST_URL"
        -Dsonar.login="$SONAR_TOKEN"
        -Dsonar.qualitygate.wait=true
  allow_failure: false


# ===== STAGE: SNYK - Scan des d√©pendances =====
snyk-dependency-scan:
  stage: snyk
  image: gradle:8.4-jdk21
  before_script:
    - curl -sL https://deb.nodesource.com/setup_18.x | bash -
    - apt-get install -y nodejs
    - npm install -g snyk
  script:
    - snyk auth "$SNYK_TOKEN"
    - snyk test
      --file=build.gradle
      --severity-threshold=high
      --json-file-output=snyk_report.json
      || echo "Snyk a trouv√© des vuln√©rabilit√©s mais on continue le pipeline"
    - snyk monitor --file=build.gradle
  artifacts:
    when: always
    reports:
      sast: snyk_report.json  # Int√©gration avec GitLab Security Dashboard
    paths:
      - snyk_report.json
  allow_failure: true


# ===== STAGE: DOCKER BUILD =====
docker_build:
  stage: docker-build
  image: docker:latest
  dependencies: []
  services:
    - name: docker:dind
      alias: docker
  script:
    - echo "Construction de l'image Docker..."
    - docker build -t "$DOCKER_IMAGE:$IMAGE_VERSION" .
    - docker images "$DOCKER_IMAGE:$IMAGE_VERSION"
    - mkdir image
    - docker save "$DOCKER_IMAGE:$IMAGE_VERSION" > "image/spring-boot-$IMAGE_VERSION.tar"
    - docker rmi "$DOCKER_IMAGE:$IMAGE_VERSION"
  artifacts:
    paths:
      - image/
    when: on_success
    expire_in: 4 days


# ===== STAGE: TRIVY =====
trivy_scan:
  stage: trivy-scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  needs: 
    - docker_build
  script:
    - trivy image 
      --severity CRITICAL,HIGH 
      --ignore-unfixed --exit-code 1
      --input "image/spring-boot-$IMAGE_VERSION.tar"
      --format cyclonedx --output trivy-report.json
  artifacts:
    reports:
      cyclonedx: trivy-report.json  # Int√©gration avec GitLab Security
    paths:
      - trivy-report.json
  allow_failure: false  # Bloquer si vuln√©rabilit√©s critiques


# ===== STAGE: DOCKER PUSH =====
docker_push: 
  stage: docker-push
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  needs:
    - docker_build
    - trivy_scan  # S'ex√©cute seulement si Trivy r√©ussit
  before_script:
    # Charger image depuis les artefacts
    - docker load -i "image/spring-boot-$IMAGE_VERSION.tar"
  script:
    - echo "Publication de l'image Docker vers Nexus..."
    - echo "$NEXUS_PASSWORD" | docker login "$NEXUS_PRIVATE" -u "$NEXUS_USER" --password-stdin
    - docker tag "$DOCKER_IMAGE:$IMAGE_VERSION" "$NEXUS_PRIVATE/tubie-ops/spring-boot:$IMAGE_VERSION"
    - docker push "$NEXUS_PRIVATE/tubie-ops/spring-boot:$IMAGE_VERSION"  
    - docker rmi "$NEXUS_PRIVATE/tubie-ops/spring-boot:$IMAGE_VERSION" || true


# ===== STAGE: NOTIFICATIONS =====
notify-test-result:
  stage: notify
  <<: *slack-notify
  variables:
    SLACK_MESSAGE: "‚úÖ Les Tests pour le projet ${CI_PROJECT_NAME} sur la branch ${CI_COMMIT_REF_NAME} se sont termin√©s avec succ√®s! Commit: ${CI_COMMIT_SHA:0:8} par ${CI_COMMIT_AUTHOR}"
  when: on_success
  needs:
    - test-java-project

notify-test-failure:
  stage: notify
  <<: *slack-notify
  variables:
    SLACK_MESSAGE: "‚ùå  Les tests pour le projet ${CI_PROJECT_NAME} sur la branche ${CI_COMMIT_REF_NAME} ont √©chou√© ! Commit : ${CI_COMMIT_SHA:0:8} par ${CI_COMMIT_AUTHOR}"
  when: on_failure
  needs:
    - test-java-project

notify-build-result:
  stage: notify
  <<: *slack-notify
  variables:
    SLACK_MESSAGE: 
  when: on_success
  needs:
    - build-java-project

notify-docker-push:
  stage: notify
  <<: *slack-notify
  variables:
    SLACK_MESSAGE: "üê≥ Docker image for ${CI_PROJECT_NAME} pushed successfully! Image: ${NEXUS_PRIVATE}/tubie-ops/spring-boot:${IMAGE_VERSION} by ${CI_COMMIT_AUTHOR}"
  when: on_success
  needs:
    - docker_push

notify-pipeline-failure:
  stage: notify
  <<: *slack-notify
  variables:
    SLACK_MESSAGE: "üí• Pipeline for ${CI_PROJECT_NAME} on branch ${CI_COMMIT_REF_NAME} FAILED! Check the logs. Commit: ${CI_COMMIT_SHA:0:8} by ${CI_COMMIT_AUTHOR}"
  when: on_failure
  needs:
    - test-java-project
    - build-java-project
    - checkstyle-analysis
    - sonarqube-check
    - docker_build
    - trivy_scan
    - docker_push