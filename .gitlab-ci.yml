workflow:
    name: Spring Boot Gradle Pipeline  # Nom personnalisé du pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH =~ /^gradle/
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^gradle/ && $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: always


stages:
  - test
  - test-sast
  - build


# Job de test
test-java-project:
  stage: test
  image: gradle:8.4-jdk21
  services:
    - name: mysql:latest
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: root
  before_script:
    - chmod +x ./gradlew    # S'assurer que gradlew est exécutable
    - apt-get update -y && apt-get install -y mysql-client  # Installation du client MySQL
    - echo "Attendre que MySQL soit prêt..."
    - until mysqladmin ping -hmysql --silent; do sleep 1; done
  script:
    - ./gradlew test --no-daemon
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/reports/tests/
    expire_in: 1 week
    when: always
  allow_failure: false     # Permet au pipeline de s'arrêter si les tests échouent


# Job pour l'analyse SAST avec SonarQube
.sonarqube-check:
  stage: test-sast
  image: gradle:8.4-jdk21
  needs: ["test-java-project"]  # Dépendance pour récupérer les rapports de tests
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"    # Définit l'emplacement du cache des tâches d'analyse
    GIT_DEPTH: "0"      # Indique à git de récupérer toutes les branches du projet, requises par la tâche d'analyse
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - ./gradlew sonarqube \
      -Dsonar.projectKey=Spring Boot Project \
      -Dsonar.projectName=Spring Boot Project \
      -Dsonar.java.binaries=build/classes \
      'Dsonar.tests=src/test/java \ 
      -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.token=$SONAR_TOKEN \
      -Dsonar.qualitygate.wait=true \
      --no-daemon
  allow_failure: false


# Job de build
build-java-project:
  stage: build
  image: gradle:8.4-jdk21  # Spécifier l'image Docker
  before_script:
    - chmod +x ./gradlew   # S'assurer que gradlew est exécutable
  script:
    - ./gradlew clean build -x test --no-daemon
  artifacts:
    paths:
      - build/libs/*.jar   # Conserver le JAR généré
    expire_in: 1 hour