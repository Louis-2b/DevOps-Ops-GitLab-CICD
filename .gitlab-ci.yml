workflow:
    name: Spring Boot Gradle Pipeline  # Nom personnalisé du pipeline
    rules:
        - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH =~ /^gradle/
          when: always
        - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^gradle/ && $CI_PIPELINE_SOURCE == 'merge_request_event'
          when: always


stages:
  - test
  - build
  - checkstyle
  - sast
  - sca
  


variables:
  # Database configuration
  SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/ytlecture?createDatabaseIfNotExist=true"
  SPRING_DATASOURCE_USERNAME: "root"
  SPRING_DATASOURCE_PASSWORD: "root"

  # Gradle configuration
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false"  # Optimisation mémoire Gradle


services:
  - name: mysql:8.0
    alias: mysql
    variables:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "ytlecture"


.test-setup: &test-setup
  before_script:
    - apt-get update -yq && apt-get install -y mysql-client  # Installation du client MySQL
    - echo "Waiting for MySQL to be ready..."
    - until mysqladmin ping -hmysql --silent; do sleep 2; done


# Job de test
test-java-project:
  stage: test
  image: gradle:8.4-jdk21
  <<: *test-setup
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
      - .gradle/daemon
  script:
    - ./gradlew test --no-daemon
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/reports/
      - build/test-results/
      - build/classes/java/main/
      - build/reports/jacoco/test/jacocoTestReport.xml
    expire_in: 1 week
    when: always
  allow_failure: false  # Permet au pipeline de s'arrêter si les tests échouent


# Job de build
build-java-project:
  stage: build
  image: gradle:8.4-jdk21
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
      - .gradle/daemon
  script:
    - ./gradlew clean build -x test --no-daemon
  artifacts:
    paths:
      - build/libs/*.jar   # Conserver le JAR généré
      - build/classes/java/main/
    expire_in: 1 hour


# Job pour l'analyse standard avec checkstyle
checkstyle-analysis:
  stage: checkstyle
  image: gradle:8.4-jdk21
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  script:
    - ./gradlew checkstyleMain checkstyleTest  # Exécute Checkstyle pour main et test
  artifacts:
    reports:
      junit: build/reports/checkstyle/*.xml  # Rapport Checkstyle
    paths:
      - build/reports/checkstyle/
    expire_in: 1 week
  allow_failure: false  # Ou true si vous voulez continuer malgré les violations


# Job pour l'analyse avancée avec SonarQube
sonarqube-check:
  stage: sast
  image: gradle:8.4-jdk21
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Définit l'emplacement du cache des tâches d'analyse
    GIT_DEPTH: "0"  # Indique à git de récupérer toutes les branches du projet, requises par la tâche d'analyse  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  dependencies:
    - test-java-project
    - build-java-project
  script:
    - ./gradlew sonarqube
      -Dsonar.projectKey="Spring_Boot_Project"
      -Dsonar.projectName="Spring Boot Project"
      -Dsonar.sources=src/main/java
      -Dsonar.tests=src/test/java
      -Dsonar.java.binaries=build/classes/java/main
      -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
      -Dsonar.host.url="$SONAR_HOST_URL"
      -Dsonar.login="$SONAR_TOKEN"
      -Dsonar.qualitygate.wait=true
  allow_failure: false


# Job pour l'analyse des dépendances avec Snyk
snyk-dependency-scan:
  stage: sca
  image: gradle:8.4-jdk21
  before_script:
    - curl -sL https://deb.nodesource.com/setup_18.x | bash -
    - apt-get install -y nodejs
    - npm install -g snyk
  script:
    - snyk auth "$SNYK_TOKEN"
    - snyk test
      --file=build.gradle
      --severity-threshold=medium
      --report
      --json-file-output=snyk_report.json
    - snyk monitor --file=build.gradle
  artifacts:
    when: always
    paths:
      - snyk_report.json
  allow_failure: true